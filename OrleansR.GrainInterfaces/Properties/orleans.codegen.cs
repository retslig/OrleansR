//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#if !EXCLUDE_CODEGEN
#pragma warning disable 162
#pragma warning disable 219
#pragma warning disable 693
#pragma warning disable 1591
#pragma warning disable 1998

namespace OrleansR.GrainInterfaces
{
    using System;
    using System.Net;
    using System.Runtime.Serialization;
    using System.Runtime.Serialization.Formatters.Binary;
    using System.IO;
    using System.Collections.Generic;
    using Orleans;
    using System.Collections;
    using Microsoft.AspNet.SignalR.Messaging;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.814.60418")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    public class PubSubGrainFactory
    {
        

                        public static IPubSubGrain GetGrain(long primaryKey)
                        {
                            return Cast(GrainFactoryBase.MakeGrainReferenceInternal(typeof(IPubSubGrain), 403532564, primaryKey));
                        }

                        public static IPubSubGrain GetGrain(long primaryKey, string grainClassNamePrefix)
                        {
                            return Cast(GrainFactoryBase.MakeGrainReferenceInternal(typeof(IPubSubGrain), 403532564, primaryKey, grainClassNamePrefix));
                        }

                        public static IPubSubGrain GetGrain(Guid primaryKey)
                        {
                            return Cast(GrainFactoryBase.MakeGrainReferenceInternal(typeof(IPubSubGrain), 403532564, primaryKey));
                        }

                        public static IPubSubGrain GetGrain(Guid primaryKey, string grainClassNamePrefix)
                        {
                            return Cast(GrainFactoryBase.MakeGrainReferenceInternal(typeof(IPubSubGrain), 403532564, primaryKey, grainClassNamePrefix));
                        }

            public static IPubSubGrain Cast(IAddressable grainRef)
            {
                
                return PubSubGrainReference.Cast(grainRef);
            }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.814.60418")]
        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
        [System.SerializableAttribute()]
        [Orleans.GrainReferenceAttribute("OrleansR.GrainInterfaces.IPubSubGrain")]
        internal class PubSubGrainReference : Orleans.GrainReference, IPubSubGrain, Orleans.IAddressable
        {
            

            public static IPubSubGrain Cast(IAddressable grainRef)
            {
                
                return (IPubSubGrain) GrainReference.CastInternal(typeof(IPubSubGrain), (GrainReference gr) => { return new PubSubGrainReference(gr);}, grainRef, 403532564);
            }

                protected override int InterfaceId { get { return 403532564; } }

                public override bool IsCompatible(int interfaceId) { return interfaceId == this.InterfaceId; }

                protected override string InterfaceName { get { return "OrleansR.GrainInterfaces.IPubSubGrain"; } }

                protected override string GetMethodName(int interfaceId, int methodId) { return PubSubGrainMethodInvoker.GetMethodName(interfaceId, methodId); }
            
            protected internal PubSubGrainReference(GrainReference reference) : 
                    base(reference)
            {
            }
            
            [Orleans.CopierMethodAttribute()]
            public static object _Copier(object original)
            {
                PubSubGrainReference input = ((PubSubGrainReference)(original));
                return ((PubSubGrainReference)(GrainReference.CopyGrainReference(input)));
            }
            
            [Orleans.SerializerMethodAttribute()]
            public static void _Serializer(object original, Orleans.Serialization.BinaryTokenStreamWriter stream, System.Type expected)
            {
                PubSubGrainReference input = ((PubSubGrainReference)(original));
                GrainReference.SerializeGrainReference(input, stream, expected);
            }
            
            [Orleans.DeserializerMethodAttribute()]
            public static object _Deserializer(System.Type expected, Orleans.Serialization.BinaryTokenStreamReader stream)
            {
                return PubSubGrainReference.Cast(((Orleans.GrainReference)(GrainReference.DeserializeGrainReference(expected, stream))));
            }
            
            public System.Threading.Tasks.Task Publish(Microsoft.AspNet.SignalR.Messaging.Message[] messages)
            {

                return base.InvokeMethodAsync<object>(1418215476, new object[] {messages}, TimeSpan.Zero );
            }
            
            public System.Threading.Tasks.Task Subscribe(OrleansR.GrainInterfaces.IMessageObserver observer)
            {
GrainFactoryBase.CheckGrainObserverParamInternal(observer);

                return base.InvokeMethodAsync<object>(-1032958586, new object[] {observer is GrainBase ? OrleansR.GrainInterfaces.MessageObserverFactory.Cast(observer.AsReference()) : observer}, TimeSpan.Zero );
            }
            
            public System.Threading.Tasks.Task Unsubscribe(OrleansR.GrainInterfaces.IMessageObserver observer)
            {
GrainFactoryBase.CheckGrainObserverParamInternal(observer);

                return base.InvokeMethodAsync<object>(-1026708032, new object[] {observer is GrainBase ? OrleansR.GrainInterfaces.MessageObserverFactory.Cast(observer.AsReference()) : observer}, TimeSpan.Zero );
            }
            
            public System.Threading.Tasks.Task Notify(Microsoft.AspNet.SignalR.Messaging.Message[] messages)
            {

                return base.InvokeMethodAsync<object>(1140013191, new object[] {messages}, TimeSpan.Zero );
            }
            
            public System.Threading.Tasks.Task TopologyChange(OrleansR.GrainInterfaces.IPubSubGrain[] otherGrains)
            {

                return base.InvokeMethodAsync<object>(-316297706, new object[] {otherGrains}, TimeSpan.Zero );
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.814.60418")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    [Orleans.MethodInvokerAttribute("OrleansR.GrainInterfaces.IPubSubGrain", 403532564)]
    internal class PubSubGrainMethodInvoker : IGrainMethodInvoker
    {
        
        public int InterfaceId
        {
            get
            {
                return 403532564;
            }
        }
        
        public async System.Threading.Tasks.Task<Object> Invoke(IAddressable grain, int interfaceId, int methodId, object[] arguments)
        {
                if (grain == null) throw new System.ArgumentNullException("grain");
                switch (interfaceId)
                {
                    case 403532564:  // IPubSubGrain
                        switch (methodId)
                        {
                            case 1418215476: 
                                await ((IPubSubGrain)grain).Publish((Microsoft.AspNet.SignalR.Messaging.Message[])arguments[0]);
                              return true;
                            case -1032958586: 
                                await ((IPubSubGrain)grain).Subscribe((IMessageObserver)arguments[0]);
                              return true;
                            case -1026708032: 
                                await ((IPubSubGrain)grain).Unsubscribe((IMessageObserver)arguments[0]);
                              return true;
                            case 1140013191: 
                                await ((IPubSubGrain)grain).Notify((Microsoft.AspNet.SignalR.Messaging.Message[])arguments[0]);
                              return true;
                            case -316297706: 
                                await ((IPubSubGrain)grain).TopologyChange((IPubSubGrain[])arguments[0]);
                              return true;
                            default: 
                                throw new NotImplementedException("interfaceId="+interfaceId+",methodId="+methodId);
                        }
                    default:
                        throw new System.InvalidCastException("interfaceId="+interfaceId);
                }
        }
        
        public static string GetMethodName(int interfaceId, int methodId)
        {

            switch (interfaceId)
            {
                
                case 403532564:  // IPubSubGrain
                    switch (methodId)
                    {
                        case 1418215476:
                            return "Publish";
                    case -1032958586:
                            return "Subscribe";
                    case -1026708032:
                            return "Unsubscribe";
                    case 1140013191:
                            return "Notify";
                    case -316297706:
                            return "TopologyChange";
                    case -606142484:
                            return "GetProperties";
                    
                        default: 
                            throw new NotImplementedException("interfaceId="+interfaceId+",methodId="+methodId);
                    }

                default:
                    throw new System.InvalidCastException("interfaceId="+interfaceId);
            }
        }
    }
    
    [Serializable()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.814.60418")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    public class PubSubGrainProperties
    {
        

            public Dictionary<string,object> AsDictionary()
            {  
                var retValue = new Dictionary<string,object>();
                return retValue;
            }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.814.60418")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    public class PubSubManagerFactory
    {
        

                        public static IPubSubManager GetGrain(long primaryKey)
                        {
                            return Cast(GrainFactoryBase.MakeGrainReferenceInternal(typeof(IPubSubManager), 1150057381, primaryKey));
                        }

                        public static IPubSubManager GetGrain(long primaryKey, string grainClassNamePrefix)
                        {
                            return Cast(GrainFactoryBase.MakeGrainReferenceInternal(typeof(IPubSubManager), 1150057381, primaryKey, grainClassNamePrefix));
                        }

                        public static IPubSubManager GetGrain(Guid primaryKey)
                        {
                            return Cast(GrainFactoryBase.MakeGrainReferenceInternal(typeof(IPubSubManager), 1150057381, primaryKey));
                        }

                        public static IPubSubManager GetGrain(Guid primaryKey, string grainClassNamePrefix)
                        {
                            return Cast(GrainFactoryBase.MakeGrainReferenceInternal(typeof(IPubSubManager), 1150057381, primaryKey, grainClassNamePrefix));
                        }

            public static IPubSubManager Cast(IAddressable grainRef)
            {
                
                return PubSubManagerReference.Cast(grainRef);
            }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.814.60418")]
        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
        [System.SerializableAttribute()]
        [Orleans.GrainReferenceAttribute("OrleansR.GrainInterfaces.IPubSubManager")]
        internal class PubSubManagerReference : Orleans.GrainReference, IPubSubManager, Orleans.IAddressable
        {
            

            public static IPubSubManager Cast(IAddressable grainRef)
            {
                
                return (IPubSubManager) GrainReference.CastInternal(typeof(IPubSubManager), (GrainReference gr) => { return new PubSubManagerReference(gr);}, grainRef, 1150057381);
            }

                protected override int InterfaceId { get { return 1150057381; } }

                public override bool IsCompatible(int interfaceId) { return interfaceId == this.InterfaceId; }

                protected override string InterfaceName { get { return "OrleansR.GrainInterfaces.IPubSubManager"; } }

                protected override string GetMethodName(int interfaceId, int methodId) { return PubSubManagerMethodInvoker.GetMethodName(interfaceId, methodId); }
            
            protected internal PubSubManagerReference(GrainReference reference) : 
                    base(reference)
            {
            }
            
            [Orleans.CopierMethodAttribute()]
            public static object _Copier(object original)
            {
                PubSubManagerReference input = ((PubSubManagerReference)(original));
                return ((PubSubManagerReference)(GrainReference.CopyGrainReference(input)));
            }
            
            [Orleans.SerializerMethodAttribute()]
            public static void _Serializer(object original, Orleans.Serialization.BinaryTokenStreamWriter stream, System.Type expected)
            {
                PubSubManagerReference input = ((PubSubManagerReference)(original));
                GrainReference.SerializeGrainReference(input, stream, expected);
            }
            
            [Orleans.DeserializerMethodAttribute()]
            public static object _Deserializer(System.Type expected, Orleans.Serialization.BinaryTokenStreamReader stream)
            {
                return PubSubManagerReference.Cast(((Orleans.GrainReference)(GrainReference.DeserializeGrainReference(expected, stream))));
            }
            
            public System.Threading.Tasks.Task<OrleansR.GrainInterfaces.IPubSubGrain[]> Register(OrleansR.GrainInterfaces.IPubSubGrain grainSubscriber)
            {

                return base.InvokeMethodAsync<OrleansR.GrainInterfaces.IPubSubGrain[]>(-203526534, new object[] {grainSubscriber is GrainBase ? OrleansR.GrainInterfaces.PubSubGrainFactory.Cast(grainSubscriber.AsReference()) : grainSubscriber}, TimeSpan.Zero );
            }
            
            public System.Threading.Tasks.Task Unregister(OrleansR.GrainInterfaces.IPubSubGrain grainSubscriber)
            {

                return base.InvokeMethodAsync<object>(-2125469177, new object[] {grainSubscriber is GrainBase ? OrleansR.GrainInterfaces.PubSubGrainFactory.Cast(grainSubscriber.AsReference()) : grainSubscriber}, TimeSpan.Zero );
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.814.60418")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    [Orleans.MethodInvokerAttribute("OrleansR.GrainInterfaces.IPubSubManager", 1150057381)]
    internal class PubSubManagerMethodInvoker : IGrainMethodInvoker
    {
        
        public int InterfaceId
        {
            get
            {
                return 1150057381;
            }
        }
        
        public async System.Threading.Tasks.Task<Object> Invoke(IAddressable grain, int interfaceId, int methodId, object[] arguments)
        {
                if (grain == null) throw new System.ArgumentNullException("grain");
                switch (interfaceId)
                {
                    case 1150057381:  // IPubSubManager
                        switch (methodId)
                        {
                            case -203526534: 
                                return await ((IPubSubManager)grain).Register((IPubSubGrain)arguments[0]);
                            case -2125469177: 
                                await ((IPubSubManager)grain).Unregister((IPubSubGrain)arguments[0]);
                              return true;
                            default: 
                                throw new NotImplementedException("interfaceId="+interfaceId+",methodId="+methodId);
                        }
                    default:
                        throw new System.InvalidCastException("interfaceId="+interfaceId);
                }
        }
        
        public static string GetMethodName(int interfaceId, int methodId)
        {

            switch (interfaceId)
            {
                
                case 1150057381:  // IPubSubManager
                    switch (methodId)
                    {
                        case -203526534:
                            return "Register";
                    case -2125469177:
                            return "Unregister";
                    case -606142484:
                            return "GetProperties";
                    
                        default: 
                            throw new NotImplementedException("interfaceId="+interfaceId+",methodId="+methodId);
                    }

                default:
                    throw new System.InvalidCastException("interfaceId="+interfaceId);
            }
        }
    }
    
    [Serializable()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.814.60418")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    public class PubSubManagerProperties
    {
        

            public Dictionary<string,object> AsDictionary()
            {  
                var retValue = new Dictionary<string,object>();
                return retValue;
            }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.814.60418")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    public class MessageObserverFactory
    {
        

            public static IMessageObserver Cast(IAddressable grainRef)
            {
                
                return MessageObserverReference.Cast(grainRef);
            }

        private static IGrainMethodInvoker methodInvoker;

        public async static System.Threading.Tasks.Task<IMessageObserver> CreateObjectReference(IMessageObserver obj)
        {
            if (methodInvoker == null) methodInvoker = new MessageObserverMethodInvoker();
            return MessageObserverFactory.Cast(await GrainReference.CreateObjectReference(obj, methodInvoker));
        }

        public static void DeleteObjectReference(IMessageObserver reference)
        {
            GrainReference.DeleteObjectReference(reference);
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.814.60418")]
        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
        [System.SerializableAttribute()]
        [Orleans.GrainReferenceAttribute("OrleansR.GrainInterfaces.IMessageObserver")]
        internal class MessageObserverReference : Orleans.GrainReference, IMessageObserver, Orleans.IAddressable
        {
            

            public static IMessageObserver Cast(IAddressable grainRef)
            {
                
                return (IMessageObserver) GrainReference.CastInternal(typeof(IMessageObserver), (GrainReference gr) => { return new MessageObserverReference(gr);}, grainRef, 1167282281);
            }

                protected override int InterfaceId { get { return 1167282281; } }

                public override bool IsCompatible(int interfaceId) { return interfaceId == this.InterfaceId; }

                protected override string InterfaceName { get { return "OrleansR.GrainInterfaces.IMessageObserver"; } }

                protected override string GetMethodName(int interfaceId, int methodId) { return MessageObserverMethodInvoker.GetMethodName(interfaceId, methodId); }
            
            protected internal MessageObserverReference(GrainReference reference) : 
                    base(reference)
            {
            }
            
            [Orleans.CopierMethodAttribute()]
            public static object _Copier(object original)
            {
                MessageObserverReference input = ((MessageObserverReference)(original));
                return ((MessageObserverReference)(GrainReference.CopyGrainReference(input)));
            }
            
            [Orleans.SerializerMethodAttribute()]
            public static void _Serializer(object original, Orleans.Serialization.BinaryTokenStreamWriter stream, System.Type expected)
            {
                MessageObserverReference input = ((MessageObserverReference)(original));
                GrainReference.SerializeGrainReference(input, stream, expected);
            }
            
            [Orleans.DeserializerMethodAttribute()]
            public static object _Deserializer(System.Type expected, Orleans.Serialization.BinaryTokenStreamReader stream)
            {
                return MessageObserverReference.Cast(((Orleans.GrainReference)(GrainReference.DeserializeGrainReference(expected, stream))));
            }
            
            public void Send(Microsoft.AspNet.SignalR.Messaging.Message[] message)
            {

                base.InvokeOneWayMethod(-679320403, new object[] {message} );
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.814.60418")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    [Orleans.MethodInvokerAttribute("OrleansR.GrainInterfaces.IMessageObserver", 1167282281)]
    internal class MessageObserverMethodInvoker : IGrainMethodInvoker
    {
        
        public int InterfaceId
        {
            get
            {
                return 1167282281;
            }
        }
        
        public async System.Threading.Tasks.Task<Object> Invoke(IAddressable grain, int interfaceId, int methodId, object[] arguments)
        {
                if (grain == null) throw new System.ArgumentNullException("grain");
                switch (interfaceId)
                {
                    case 1167282281:  // IMessageObserver
                        switch (methodId)
                        {
                            case -679320403: 
                                ((IMessageObserver)grain).Send((Microsoft.AspNet.SignalR.Messaging.Message[])arguments[0]); return true;
                            default: 
                                throw new NotImplementedException("interfaceId="+interfaceId+",methodId="+methodId);
                        }
                    default:
                        throw new System.InvalidCastException("interfaceId="+interfaceId);
                }
        }
        
        public static string GetMethodName(int interfaceId, int methodId)
        {

            switch (interfaceId)
            {
                
                case 1167282281:  // IMessageObserver
                    switch (methodId)
                    {
                        case -679320403:
                            return "Send";
                    case -606142484:
                            return "GetProperties";
                    
                        default: 
                            throw new NotImplementedException("interfaceId="+interfaceId+",methodId="+methodId);
                    }

                default:
                    throw new System.InvalidCastException("interfaceId="+interfaceId);
            }
        }
    }
    
    [Serializable()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.814.60418")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    public class MessageObserverProperties
    {
        

            public Dictionary<string,object> AsDictionary()
            {  
                var retValue = new Dictionary<string,object>();
                return retValue;
            }
    }
}
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace OrleansR.GrainInterfacesSerializers
{
    using System;
    using System.Collections.Generic;
    using System.Reflection;
    using Orleans.Serialization;
    using Microsoft.AspNet.SignalR.Messaging;
    using System.Text;
    using System.Collections;
    using System.IO;
    using System.Runtime.InteropServices;
    
    
    [Orleans.RegisterSerializerAttribute()]
    internal class Microsoft_AspNet_SignalR_Messaging_MessageSerialization
    {
        
        private static System.Reflection.FieldInfo fieldInfo2;
        
        private static System.Reflection.FieldInfo fieldInfo3;
        
        private static System.Reflection.FieldInfo fieldInfo4;
        
        private static System.Reflection.FieldInfo fieldInfo5;
        
        private static System.Reflection.FieldInfo fieldInfo6;
        
        private static System.Reflection.FieldInfo fieldInfo7;
        
        private static System.Reflection.FieldInfo fieldInfo8;
        
        private static System.Reflection.FieldInfo fieldInfo9;
        
        private static System.Reflection.FieldInfo fieldInfo10;
        
        static Microsoft_AspNet_SignalR_Messaging_MessageSerialization()
        {
            Register();
        }
        
        public static object DeepCopier(object original)
        {
            Microsoft.AspNet.SignalR.Messaging.Message input = ((Microsoft.AspNet.SignalR.Messaging.Message)(original));
            Microsoft.AspNet.SignalR.Messaging.Message result = new Microsoft.AspNet.SignalR.Messaging.Message();
            Orleans.Serialization.SerializationContext.Current.RecordObject(original, result);
            result.CommandId = input.CommandId;
            object objResult = ((object)(result));
            object temp2 = ((Encoding)(Orleans.Serialization.SerializationManager.DeepCopyInner(input.Encoding)));
            fieldInfo2.SetValue(objResult, temp2);
            object temp3 = input.Filter;
            fieldInfo3.SetValue(objResult, temp3);
            object temp4 = input.IsAck;
            fieldInfo4.SetValue(objResult, temp4);
            object temp5 = input.Key;
            fieldInfo5.SetValue(objResult, temp5);
            object temp6 = input.MappingId;
            fieldInfo6.SetValue(objResult, temp6);
            object temp7 = input.Source;
            fieldInfo7.SetValue(objResult, temp7);
            object temp8 = input.StreamIndex;
            fieldInfo8.SetValue(objResult, temp8);
            object temp9 = ((ArraySegment<Byte>)(Orleans.Serialization.SerializationManager.DeepCopyInner(input.Value)));
            fieldInfo9.SetValue(objResult, temp9);
            object temp10 = input.WaitForAck;
            fieldInfo10.SetValue(objResult, temp10);
            return objResult;
        }
        
        public static void Serializer(object untypedInput, Orleans.Serialization.BinaryTokenStreamWriter stream, System.Type expected)
        {
            Microsoft.AspNet.SignalR.Messaging.Message input = ((Microsoft.AspNet.SignalR.Messaging.Message)(untypedInput));
            Orleans.Serialization.SerializationManager.SerializeInner(input.CommandId, stream, typeof(String));
            Orleans.Serialization.SerializationManager.SerializeInner(input.Encoding, stream, typeof(Encoding));
            Orleans.Serialization.SerializationManager.SerializeInner(input.Filter, stream, typeof(String));
            Orleans.Serialization.SerializationManager.SerializeInner(input.IsAck, stream, typeof(Boolean));
            Orleans.Serialization.SerializationManager.SerializeInner(input.Key, stream, typeof(String));
            Orleans.Serialization.SerializationManager.SerializeInner(input.MappingId, stream, typeof(UInt64));
            Orleans.Serialization.SerializationManager.SerializeInner(input.Source, stream, typeof(String));
            Orleans.Serialization.SerializationManager.SerializeInner(input.StreamIndex, stream, typeof(Int32));
            Orleans.Serialization.SerializationManager.SerializeInner(input.Value, stream, typeof(ArraySegment<Byte>));
            Orleans.Serialization.SerializationManager.SerializeInner(input.WaitForAck, stream, typeof(Boolean));
        }
        
        public static object Deserializer(System.Type expected, Orleans.Serialization.BinaryTokenStreamReader stream)
        {
            Microsoft.AspNet.SignalR.Messaging.Message result = new Microsoft.AspNet.SignalR.Messaging.Message();
            result.CommandId = ((String)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(String), stream)));
            object objResult = ((object)(result));
            object temp2 = ((Encoding)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(Encoding), stream)));
            fieldInfo2.SetValue(objResult, temp2);
            object temp3 = ((String)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(String), stream)));
            fieldInfo3.SetValue(objResult, temp3);
            object temp4 = ((Boolean)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(Boolean), stream)));
            fieldInfo4.SetValue(objResult, temp4);
            object temp5 = ((String)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(String), stream)));
            fieldInfo5.SetValue(objResult, temp5);
            object temp6 = ((UInt64)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(UInt64), stream)));
            fieldInfo6.SetValue(objResult, temp6);
            object temp7 = ((String)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(String), stream)));
            fieldInfo7.SetValue(objResult, temp7);
            object temp8 = ((Int32)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(Int32), stream)));
            fieldInfo8.SetValue(objResult, temp8);
            object temp9 = ((ArraySegment<Byte>)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(ArraySegment<Byte>), stream)));
            fieldInfo9.SetValue(objResult, temp9);
            object temp10 = ((Boolean)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(Boolean), stream)));
            fieldInfo10.SetValue(objResult, temp10);
            return objResult;
        }
        
        public static void Register()
        {
            Orleans.Serialization.SerializationManager.Register(typeof(Microsoft.AspNet.SignalR.Messaging.Message), DeepCopier, Serializer, Deserializer);
            fieldInfo2 = typeof(Microsoft.AspNet.SignalR.Messaging.Message).GetField("<Encoding>k__BackingField", (System.Reflection.BindingFlags.Instance 
                            | (System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic)));
            fieldInfo3 = typeof(Microsoft.AspNet.SignalR.Messaging.Message).GetField("<Filter>k__BackingField", (System.Reflection.BindingFlags.Instance 
                            | (System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic)));
            fieldInfo4 = typeof(Microsoft.AspNet.SignalR.Messaging.Message).GetField("<IsAck>k__BackingField", (System.Reflection.BindingFlags.Instance 
                            | (System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic)));
            fieldInfo5 = typeof(Microsoft.AspNet.SignalR.Messaging.Message).GetField("<Key>k__BackingField", (System.Reflection.BindingFlags.Instance 
                            | (System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic)));
            fieldInfo6 = typeof(Microsoft.AspNet.SignalR.Messaging.Message).GetField("<MappingId>k__BackingField", (System.Reflection.BindingFlags.Instance 
                            | (System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic)));
            fieldInfo7 = typeof(Microsoft.AspNet.SignalR.Messaging.Message).GetField("<Source>k__BackingField", (System.Reflection.BindingFlags.Instance 
                            | (System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic)));
            fieldInfo8 = typeof(Microsoft.AspNet.SignalR.Messaging.Message).GetField("<StreamIndex>k__BackingField", (System.Reflection.BindingFlags.Instance 
                            | (System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic)));
            fieldInfo9 = typeof(Microsoft.AspNet.SignalR.Messaging.Message).GetField("<Value>k__BackingField", (System.Reflection.BindingFlags.Instance 
                            | (System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic)));
            fieldInfo10 = typeof(Microsoft.AspNet.SignalR.Messaging.Message).GetField("<WaitForAck>k__BackingField", (System.Reflection.BindingFlags.Instance 
                            | (System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic)));
        }
    }
}
#pragma warning restore 162
#pragma warning restore 219
#pragma warning restore 693
#pragma warning restore 1591
#pragma warning restore 1998
#endif
